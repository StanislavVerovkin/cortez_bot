require('dotenv').config();
const cron = require('node-cron');

const Telegraf = require('telegraf');
const Markup = require('telegraf/markup');
const app = require('./app');

const port = process.env.PORT || 3000;

const groupId = '-321378259';
const userId = '280891433';

const bot = new Telegraf(process.env.BOT_TOKEN);

let state = {
  firstTraining: [] ,
  secondTraining: [] ,
  collectiveTraining: [] ,
  badFighters: [] ,
};

bot.start(( ctx ) => {
  ctx.reply(
    `–ü—Ä–∏–≤–µ—Ç ${ctx.from.first_name}! \n` +
    '–î–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–∏—à–∏ /choose. \n' +
    '–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –¥–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. \n' +
    '(–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –°—Ä–µ–¥–∞, –ü—è—Ç–Ω–∏—Ü–∞).'
  )
});

cron.schedule('06 20 * * 1,3,5' , () => {

  clearState();

  bot.telegram.sendMessage(
    groupId ,
    'üî¥–í–Ω–∏–º–∞–Ω–∏–µüî¥\n' +
    '\n' +
    'üìù –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å\n' +
    '(–î–æ 16:00)\n' +
    '(–ù–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞)\n' +
    '\n' +
    '–ñ–º–µ–º —Å—é–¥–∞ @cortezmma_bot \n' +
    '–í—ã–±–∏—Ä–∞–µ–º –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤–∞–º —É–¥–æ–±–Ω–æ\n' +
    'üîπ19:30\n' +
    'üîπ21:00\n' +
    '\n' +
    '–£—Å—Ä–µ–¥–Ω—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è - 20:00 \n' +
    '–ì–¥–µ –ø–ª—é—Å –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤–∞–º —É–¥–æ–±–Ω–æ —É—Å—Ä–µ–¥–Ω—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è, –∞ –º–∏–Ω—É—Å - –Ω–µ—É–¥–æ–±–Ω–æ\n'
  );

});

bot.command('choose' , ( { reply } ) => {
  reply('–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è, –±–æ–π—Ü—ã !!!' , Markup
    .keyboard([
      [ 'üëä 19:30 (+)' , 'üëä 19:30 (-)' ] ,
      [ 'üëä 21:00 (+)' , 'üëä 21:00 (-)' ] ,
      [ 'üëé -' ] ,
    ])
    .oneTime()
    .resize()
    .extra()
  )
});

bot.hears('üëä 19:30 (+)' , ( ctx ) => {
  setState('firstTraining' , ctx);
});

bot.hears('üëä 21:00 (+)' , ( ctx ) => {
  setState('secondTraining' , ctx);
});

bot.hears('üëä 19:30 (-)' , ( ctx ) => {
  setState('firstTraining' , ctx);
});

bot.hears('üëä 21:00 (-)' , ( ctx ) => {
  setState('secondTraining' , ctx);
});

bot.hears('üëé -' , ( ctx ) => {
  setState('badFighters' , ctx);
});

bot.command('result' , () => {

  let firstFighters = mapUsers(state.firstTraining);
  let secondFighters = mapUsers(state.secondTraining);

  let firstArr = filterUsers(state.firstTraining);
  let secondArr = filterUsers(state.secondTraining);

  state.collectiveTraining = firstArr.concat(secondArr);

  let collectiveFighters = mapUsers(state.collectiveTraining);

  bot.telegram.sendMessage(
    userId ,
    '<b>19:30</b> \n' +
    `<i>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–π—Ü–æ–≤:</i> ${state.firstTraining.length} \n` +
    `<i>–ë–æ–π—Ü—ã:</i> ${firstFighters} \n` +
    '\n' +
    '<b>21:00</b> \n' +
    `<i>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–π—Ü–æ–≤:</i> ${state.secondTraining.length} \n` +
    `<i>–ë–æ–π—Ü—ã:</i> ${secondFighters} \n` +
    '\n' +
    '<b>20:00</b> \n' +
    `<i>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–π—Ü–æ–≤:</i> ${state.collectiveTraining.length} \n` +
    `<i>–ë–æ–π—Ü—ã:</i> ${collectiveFighters} \n` +
    '\n' +
    `<b>–ë–æ–π—Ü—ã –∫–æ—Ç–æ—Ä—ã–µ –º–∏–Ω—É—Å–Ω—É–ª–∏—Å—å</b> \n` +
    `<i>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–π—Ü–æ–≤:</i> ${state.badFighters.length} \n` +
    `<i>–ë–æ–π—Ü—ã:</i> ${state.badFighters} \n` ,
    { parse_mode: "HTML" }
  )

});

cron.schedule('07 20 * * 1,3,5' , () => {
  bot.telegram.sendMessage(
    userId ,
    '–ü—Ä–∏–≤–µ—Ç! –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—Ç–æ –±—É–¥–µ—Ç –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ. \n' +
    '–ñ–º–∏ /result —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.'
  )
});

bot.launch();

function setState ( choiceTraining , ctx ) {
  switch ( ctx.match ) {
    case 'üëä 19:30 (+)':
      if ( state[ choiceTraining ].length !== 0 ) {
        checkOrder(choiceTraining , ctx , true);
      } else {
        createFirstOrder(choiceTraining , ctx , true);
      }
      break;
    case 'üëä 19:30 (-)':
      if ( state[ choiceTraining ].length !== 0 ) {
        checkOrder(choiceTraining , ctx , true);
      } else {
        createFirstOrder(choiceTraining , ctx , true);
      }
      break;
    case 'üëä 21:00 (+)':
      if ( state[ choiceTraining ].length !== 0 ) {
        checkOrder(choiceTraining , ctx , true);
      } else {
        createFirstOrder(choiceTraining , ctx , true);
      }
      break;
    case 'üëä 21:00 (-)':
      if ( state[ choiceTraining ].length !== 0 ) {
        checkOrder(choiceTraining , ctx , true);
      } else {
        createFirstOrder(choiceTraining , ctx , true);
      }
      break;
    case 'üëé -':
      state[ choiceTraining ].push(ctx.update.message.from.first_name);
      ctx.reply('–ñ–∞–ª—å —á—Ç–æ —Ç–µ–±—è –Ω–µ –±—É–¥–µ—Ç üòü');
      break;
  }
}

function clearState () {
  state.firstTraining = [];
  state.secondTraining = [];
  state.collectiveTraining = [];
  state.badFighters = [];
}

function mapUsers ( state ) {
  return state.map(( i ) => {
    return i.name;
  })
}

function filterUsers ( arr ) {
  return arr.filter(( i ) => {
    return i.additionalTime;
  })
}

function checkOrder ( choiceTraining , ctx , additionalTime ) {
  state[ choiceTraining ].forEach(i => {
    if ( ctx.from.id === i.id ) {
      ctx.reply('–î—è–¥—è, —Ç—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–ª—Å—è!');
    } else {
      createFirstOrder(choiceTraining , ctx , additionalTime);
    }
  });
}

function createFirstOrder ( choiceTraining , ctx , additionalTime ) {
  state[ choiceTraining ].push({
    time: ctx.match ,
    additionalTime ,
    id: ctx.from.id ,
    name: ctx.update.message.from.first_name ,
  });
  ctx.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–ø–∏—Å—å! –ñ–¥–µ–º!')
}

app.listen(port , () => console.log(`Server on port ${port}`));